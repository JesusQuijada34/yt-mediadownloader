#!/bin/bash
# =============================================================================
# YouTube Media Downloader - Script de Ejecuci√≥n Autom√°tica para Unix/Linux/macOS
# =============================================================================
#
# Este script automatiza la instalaci√≥n y ejecuci√≥n de la aplicaci√≥n
# YouTube Media Downloader en sistemas Unix/Linux/macOS.
#
# Autor: influent
# Versi√≥n: 1.0.0
# Fecha: 2024-12-19
# Licencia: MIT
#
# =============================================================================
# INSTRUCCIONES PARA PRINCIPIANTES
# =============================================================================
#
# 1. PERMISOS: Dale permisos de ejecuci√≥n al script:
#    chmod +x autorun
#
# 2. EJECUTAR: Ejecuta el script desde la terminal:
#    ./autorun
#
# 3. PERMISOS: Si se te pide contrase√±a, es normal para instalar paquetes
# 4. ESPERAR: El script instalar√° las dependencias autom√°ticamente
# 5. DISFRUTAR: La aplicaci√≥n se abrir√° autom√°ticamente
#
# =============================================================================
# REQUISITOS DEL SISTEMA
# =============================================================================
#
# - Linux (Ubuntu 18.04+, Debian 10+, CentOS 8+, etc.)
# - macOS 10.14+ (Mojave o superior)
# - Python 3.7 o superior instalado
# - Conexi√≥n a Internet para descargar dependencias
# - Permisos de sudo (para instalaci√≥n de paquetes del sistema)
#
# =============================================================================
# FUNCIONES DEL SCRIPT
# =============================================================================
#
# ‚úì Detecci√≥n autom√°tica del sistema operativo
# ‚úì Verificaci√≥n de Python instalado
# ‚úì Instalaci√≥n autom√°tica de dependencias del sistema
# ‚úì Configuraci√≥n del entorno virtual (opcional)
# ‚úì Instalaci√≥n de dependencias de Python
# ‚úì Ejecuci√≥n de la aplicaci√≥n
# ‚úì Manejo de errores y notificaciones
# ‚úì Limpieza autom√°tica de archivos temporales
#
# =============================================================================

# Colores para la salida
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Funci√≥n para imprimir mensajes con colores
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}$1${NC}"
}

# Funci√≥n para limpiar al salir
cleanup() {
    print_status "Limpiando archivos temporales..."
    rm -rf __pycache__ 2>/dev/null
    rm -f *.pyc 2>/dev/null
    print_success "Limpieza completada"
}

# Configurar trap para limpieza al salir
trap cleanup EXIT

# =============================================================================
# ENCABEZADO Y VERIFICACIONES INICIALES
# =============================================================================

clear
echo
print_header "============================================================================="
print_header "üé¨ YOUTUBE MEDIA DOWNLOADER - INSTALADOR AUTOM√ÅTICO"
print_header "============================================================================="
echo
print_status "üöÄ Iniciando proceso de instalaci√≥n autom√°tica..."
print_status "üìÖ Fecha y hora: $(date)"
print_status "üíª Sistema operativo: $(uname -s)"
print_status "üîç Distribuci√≥n: $(lsb_release -d 2>/dev/null | cut -f2 || echo 'No disponible')"
print_status "üèóÔ∏è Arquitectura: $(uname -m)"
echo

# =============================================================================
# DETECCI√ìN DEL SISTEMA OPERATIVO
# =============================================================================

print_status "üîç Detectando sistema operativo..."

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Linux
    if command -v apt-get &> /dev/null; then
        OS="debian"
        PKG_MANAGER="apt-get"
        print_success "Sistema Debian/Ubuntu detectado (apt-get)"
    elif command -v yum &> /dev/null; then
        OS="redhat"
        PKG_MANAGER="yum"
        print_success "Sistema RedHat/CentOS detectado (yum)"
    elif command -v pacman &> /dev/null; then
        OS="arch"
        PKG_MANAGER="pacman"
        print_success "Sistema Arch Linux detectado (pacman)"
    else
        print_warning "Sistema Linux detectado pero gestor de paquetes no reconocido"
        OS="linux"
        PKG_MANAGER="unknown"
    fi
elif [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    OS="macos"
    PKG_MANAGER="brew"
    print_success "Sistema macOS detectado (Homebrew)"
else
    print_warning "Sistema operativo no reconocido: $OSTYPE"
    OS="unknown"
    PKG_MANAGER="unknown"
fi

# =============================================================================
# VERIFICACI√ìN DE PYTHON
# =============================================================================

print_status "üîç Verificando instalaci√≥n de Python..."

# Verificar si Python est√° instalado
if ! command -v python3 &> /dev/null; then
    print_error "Python3 no est√° instalado o no est√° en el PATH del sistema"
    echo
    print_status "üìã SOLUCI√ìN: Instala Python desde tu gestor de paquetes:"
    
    case $OS in
        "debian")
            echo "   sudo apt update && sudo apt install python3 python3-pip"
            ;;
        "redhat")
            echo "   sudo yum install python3 python3-pip"
            ;;
        "arch")
            echo "   sudo pacman -S python python-pip"
            ;;
        "macos")
            echo "   brew install python"
            ;;
        *)
            echo "   Visita https://www.python.org/downloads/"
            ;;
    esac
    echo
    print_status "üîÑ Despu√©s de instalar Python, ejecuta este script nuevamente"
    echo
    exit 1
fi

# Obtener versi√≥n de Python
PYTHON_VERSION=$(python3 --version 2>&1 | awk '{print $2}')
print_success "Python $PYTHON_VERSION detectado correctamente"

# Verificar versi√≥n m√≠nima (Python 3.7+)
PYTHON_MAJOR=$(echo $PYTHON_VERSION | cut -d. -f1)
PYTHON_MINOR=$(echo $PYTHON_VERSION | cut -d. -f2)

if [ "$PYTHON_MAJOR" -lt 3 ] || ([ "$PYTHON_MAJOR" -eq 3 ] && [ "$PYTHON_MINOR" -lt 7 ]); then
    print_error "Se requiere Python 3.7 o superior"
    print_status "Versi√≥n actual: $PYTHON_VERSION"
    exit 1
fi

print_success "Versi√≥n de Python compatible ($PYTHON_VERSION)"

# =============================================================================
# VERIFICACI√ìN DE PIP
# =============================================================================

echo
print_status "üîç Verificando instalaci√≥n de pip..."

if ! command -v pip3 &> /dev/null; then
    print_error "pip3 no est√° disponible"
    echo
    print_status "üìã SOLUCI√ìN: Instala pip3:"
    
    case $OS in
        "debian")
            echo "   sudo apt install python3-pip"
            ;;
        "redhat")
            echo "   sudo yum install python3-pip"
            ;;
        "arch")
            echo "   sudo pacman -S python-pip"
            ;;
        "macos")
            echo "   brew install python"
            ;;
    esac
    echo
    exit 1
fi

PIP_VERSION=$(pip3 --version 2>&1 | awk '{print $2}')
print_success "pip $PIP_VERSION disponible"

# =============================================================================
# ACTUALIZACI√ìN DE PIP
# =============================================================================

echo
print_status "üîÑ Actualizando pip a la √∫ltima versi√≥n..."
if pip3 install --upgrade pip --quiet; then
    print_success "pip actualizado correctamente"
else
    print_warning "No se pudo actualizar pip, continuando..."
fi

# =============================================================================
# INSTALACI√ìN DE DEPENDENCIAS DEL SISTEMA
# =============================================================================

echo
print_status "üì¶ Instalando dependencias del sistema..."

case $OS in
    "debian")
        print_status "Instalando paquetes del sistema para PyQt5..."
        sudo apt update
        sudo apt install -y python3-pyqt5 python3-pyqt5.qtwebengine python3-dev build-essential
        ;;
    "redhat")
        print_status "Instalando paquetes del sistema para PyQt5..."
        sudo yum install -y python3-pyqt5 python3-pyqt5-qtwebengine python3-devel gcc
        ;;
    "arch")
        print_status "Instalando paquetes del sistema para PyQt5..."
        sudo pacman -S --noconfirm python-pyqt5 python-pyqtwebengine base-devel
        ;;
    "macos")
        print_status "Verificando Homebrew..."
        if ! command -v brew &> /dev/null; then
            print_status "Instalando Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        print_status "Instalando dependencias con Homebrew..."
        brew install qt5
        ;;
    *)
        print_warning "No se pueden instalar dependencias del sistema autom√°ticamente"
        print_status "Instala manualmente PyQt5 y PyQtWebEngine para tu distribuci√≥n"
        ;;
esac

# =============================================================================
# VERIFICACI√ìN DE ARCHIVOS DEL PROYECTO
# =============================================================================

echo
print_status "üîç Verificando archivos del proyecto..."

if [ ! -f "yt-mediadownloader.py" ]; then
    print_error "No se encontr√≥ el archivo principal yt-mediadownloader.py"
    print_status "üìç Aseg√∫rate de ejecutar este script desde la carpeta del proyecto"
    echo
    exit 1
fi

if [ ! -f "lib/requirements.txt" ]; then
    print_error "No se encontr√≥ lib/requirements.txt"
    print_status "üìç Verifica que la estructura del proyecto est√© completa"
    echo
    exit 1
fi

print_success "Archivos del proyecto verificados correctamente"

# =============================================================================
# INSTALACI√ìN DE DEPENDENCIAS DE PYTHON
# =============================================================================

echo
print_status "üì¶ Instalando dependencias de Python..."
print_status "üîç Dependencias a instalar:"
echo "   - PyQt5 (interfaz gr√°fica)"
echo "   - PyQtWebEngine (navegador web)"
echo "   - pytube (descarga de YouTube)"
echo

# Instalar dependencias principales
print_status "üîß Instalando PyQt5..."
if pip3 install PyQt5 --quiet; then
    print_success "PyQt5 instalado correctamente"
else
    print_error "No se pudo instalar PyQt5"
    print_status "üí° Intenta ejecutar como administrador o verifica tu conexi√≥n a Internet"
    exit 1
fi

print_status "üîß Instalando PyQtWebEngine..."
if pip3 install PyQtWebEngine --quiet; then
    print_success "PyQtWebEngine instalado correctamente"
else
    print_error "No se pudo instalar PyQtWebEngine"
    print_status "üí° Verifica que las dependencias del sistema est√©n instaladas"
    exit 1
fi

print_status "üîß Instalando pytube..."
if pip3 install pytube --quiet; then
    print_success "pytube instalado correctamente"
else
    print_error "No se pudo instalar pytube"
    exit 1
fi

print_success "Todas las dependencias instaladas correctamente"

# =============================================================================
# VERIFICACI√ìN DE INSTALACI√ìN
# =============================================================================

echo
print_status "üîç Verificando instalaci√≥n de dependencias..."
if python3 -c "import PyQt5; import PyQt5.QtWebEngineWidgets; import pytube; print('‚úÖ Verificaci√≥n exitosa')" 2>/dev/null; then
    print_success "Verificaci√≥n de dependencias completada"
else
    print_error "Las dependencias no se instalaron correctamente"
    print_status "üîÑ Intenta ejecutar: pip3 install -r lib/requirements.txt"
    exit 1
fi

# =============================================================================
# EJECUCI√ìN DE LA APLICACI√ìN
# =============================================================================

echo
print_status "üöÄ Iniciando YouTube Media Downloader..."
echo
print_status "üìã INFORMACI√ìN DE LA APLICACI√ìN:"
echo "   - Nombre: YouTube Media Downloader"
echo "   - Versi√≥n: 1.0.0"
echo "   - Desarrollador: influent"
echo "   - Licencia: MIT"
echo
print_status "üí° CONSEJOS DE USO:"
echo "   - Navega por YouTube en el navegador embebido"
echo "   - Las URLs se detectan autom√°ticamente"
echo "   - Usa los botones del panel lateral para descargar"
echo "   - El historial se guarda autom√°ticamente"
echo
print_status "‚è≥ Abriendo aplicaci√≥n en 3 segundos..."
sleep 3

# Ejecutar la aplicaci√≥n
print_status "üé¨ Ejecutando aplicaci√≥n..."
python3 yt-mediadownloader.py

# =============================================================================
# MANEJO DE SALIDA
# =============================================================================

if [ $? -ne 0 ]; then
    echo
    print_error "La aplicaci√≥n se cerr√≥ con errores"
    echo
    print_status "üîç POSIBLES SOLUCIONES:"
    echo "   1. Verifica que todas las dependencias est√©n instaladas"
    echo "   2. Aseg√∫rate de tener permisos de escritura en la carpeta"
    echo "   3. Verifica que no haya otros procesos usando los puertos necesarios"
    echo "   4. Revisa el archivo de logs si est√° disponible"
    echo
    print_status "üìû Para obtener ayuda, consulta:"
    echo "   - README.md del proyecto"
    echo "   - Issues en GitHub"
    echo "   - Documentaci√≥n oficial de PyQt5"
    echo
else
    echo
    print_success "La aplicaci√≥n se cerr√≥ correctamente"
    echo
fi

# =============================================================================
# FINALIZACI√ìN
# =============================================================================

echo
print_header "============================================================================="
print_header "üéâ INSTALACI√ìN COMPLETADA"
print_header "============================================================================="
echo
print_success "Python verificado: $PYTHON_VERSION"
print_success "Dependencias instaladas"
print_success "Aplicaci√≥n ejecutada"
echo
print_status "üí° Para ejecutar la aplicaci√≥n nuevamente:"
echo "   python3 yt-mediadownloader.py"
echo
print_status "üìö Para m√°s informaci√≥n, consulta README.md"
print_status "üåê Repositorio: https://github.com/influent/yt-mediadownloader"
echo
print_header "============================================================================="
echo

# Pausa final para que el usuario pueda leer la informaci√≥n
read -p "Presiona Enter para continuar..."
